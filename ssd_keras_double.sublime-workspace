{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"PREDI",
				"predictions_1"
			],
			[
				"float",
				"float32"
			],
			[
				"fla",
				"float32"
			],
			[
				"y_o",
				"y_out"
			],
			[
				"y_",
				"y_out"
			],
			[
				"mbox",
				"mbox_proj"
			],
			[
				"batc",
				"batch_y"
			],
			[
				"box",
				"boxes1"
			],
			[
				"re",
				"ref_image"
			],
			[
				"file",
				"file_list"
			],
			[
				"STREET",
				"Streetview"
			],
			[
				"street",
				"streetview"
			],
			[
				"ima",
				"image_name"
			],
			[
				"til",
				"tile_y"
			],
			[
				"Ae",
				"Aerial_In"
			],
			[
				"Gr",
				"Ground_In"
			],
			[
				"A",
				"Aerial_In"
			],
			[
				"sh",
				"shw"
			],
			[
				"lis",
				"listofdetec"
			],
			[
				"score",
				"scores"
			],
			[
				"VO",
				"VOC2007"
			],
			[
				"VOCde",
				"VOCdevkit2007"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "'''\nA Keras port of the original Caffe SSD300 network.\n\nCopyright (C) 2018 Pierluigi Ferrari\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n'''\n\nfrom __future__ import division\nimport numpy as np\nfrom keras.models import Model\nfrom keras.layers import Input, Lambda, Activation, Conv2D, MaxPooling2D, ZeroPadding2D, Reshape, Concatenate, Flatten, Dense\nfrom keras.regularizers import l2\nimport keras.backend as K\n\nfrom keras_layers.keras_layer_AnchorBoxes import AnchorBoxes\nfrom keras_layers.keras_layer_Projector import Projector\n\nfrom keras_layers.keras_layer_L2Normalization import L2Normalization\nfrom keras_layers.keras_layer_DecodeDetections import DecodeDetections\nfrom keras_layers.keras_layer_DecodeDetectionsFast import DecodeDetectionsFast\nimport tensorflow as tf\nimport math\n\ndef ssd_300(image_size,\n            n_classes,\n            mode='training',\n            l2_regularization=0.0005,\n            min_scale=None,\n            max_scale=None,\n            scales=None,\n            aspect_ratios_global=None,\n            aspect_ratios_per_layer=[[1.0, 2.0, 0.5],\n                                     [1.0, 2.0, 0.5, 3.0, 1.0/3.0],\n                                     [1.0, 2.0, 0.5, 3.0, 1.0/3.0],\n                                     [1.0, 2.0, 0.5, 3.0, 1.0/3.0],\n                                     [1.0, 2.0, 0.5],\n                                     [1.0, 2.0, 0.5]],\n            two_boxes_for_ar1=True,\n            steps=[8, 16, 32, 64, 100, 300],\n            offsets=None,\n            clip_boxes=False,\n            variances=[0.1, 0.1, 0.2, 0.2],\n            coords='centroids',\n            normalize_coords=True,\n            subtract_mean=[123, 117, 104],\n            divide_by_stddev=None,\n            swap_channels=[2, 1, 0],\n            confidence_thresh=0.01,\n            iou_threshold=0.45,\n            top_k=200,\n            nms_max_output_size=400,\n            return_predictor_sizes=False):\n    '''\n    Build a Keras model with SSD300 architecture, see references.\n\n    The base network is a reduced atrous VGG-16, extended by the SSD architecture,\n    as described in the paper.\n\n    Most of the arguments that this function takes are only needed for the anchor\n    box layers. In case you're training the network, the parameters passed here must\n    be the same as the ones used to set up `SSDBoxEncoder`. In case you're loading\n    trained weights, the parameters passed here must be the same as the ones used\n    to produce the trained weights.\n\n    Some of these arguments are explained in more detail in the documentation of the\n    `SSDBoxEncoder` class.\n\n    Note: Requires Keras v2.0 or later. Currently works only with the\n    TensorFlow backend (v1.0 or later).\n\n    Arguments:\n        image_size (tuple): The input image size in the format `(height, width, channels)`.\n        n_classes (int): The number of positive classes, e.g. 20 for Pascal VOC, 80 for MS COCO.\n        mode (str, optional): One of 'training', 'inference' and 'inference_fast'. In 'training' mode,\n            the model outputs the raw prediction tensor, while in 'inference' and 'inference_fast' modes,\n            the raw predictions are decoded into absolute coordinates and filtered via confidence thresholding,\n            non-maximum suppression, and top-k filtering. The difference between latter two modes is that\n            'inference' follows the exact procedure of the original Caffe implementation, while\n            'inference_fast' uses a faster prediction decoding procedure.\n        l2_regularization (float, optional): The L2-regularization rate. Applies to all convolutional layers.\n            Set to zero to deactivate L2-regularization.\n        min_scale (float, optional): The smallest scaling factor for the size of the anchor boxes as a fraction\n            of the shorter side of the input images.\n        max_scale (float, optional): The largest scaling factor for the size of the anchor boxes as a fraction\n            of the shorter side of the input images. All scaling factors between the smallest and the\n            largest will be linearly interpolated. Note that the second to last of the linearly interpolated\n            scaling factors will actually be the scaling factor for the last predictor layer, while the last\n            scaling factor is used for the second box for aspect ratio 1 in the last predictor layer\n            if `two_boxes_for_ar1` is `True`.\n        scales (list, optional): A list of floats containing scaling factors per convolutional predictor layer.\n            This list must be one element longer than the number of predictor layers. The first `k` elements are the\n            scaling factors for the `k` predictor layers, while the last element is used for the second box\n            for aspect ratio 1 in the last predictor layer if `two_boxes_for_ar1` is `True`. This additional\n            last scaling factor must be passed either way, even if it is not being used. If a list is passed,\n            this argument overrides `min_scale` and `max_scale`. All scaling factors must be greater than zero.\n        aspect_ratios_global (list, optional): The list of aspect ratios for which anchor boxes are to be\n            generated. This list is valid for all prediction layers.\n        aspect_ratios_per_layer (list, optional): A list containing one aspect ratio list for each prediction layer.\n            This allows you to set the aspect ratios for each predictor layer individually, which is the case for the\n            original SSD300 implementation. If a list is passed, it overrides `aspect_ratios_global`.\n        two_boxes_for_ar1 (bool, optional): Only relevant for aspect ratio lists that contain 1. Will be ignored otherwise.\n            If `True`, two anchor boxes will be generated for aspect ratio 1. The first will be generated\n            using the scaling factor for the respective layer, the second one will be generated using\n            geometric mean of said scaling factor and next bigger scaling factor.\n        steps (list, optional): `None` or a list with as many elements as there are predictor layers. The elements can be\n            either ints/floats or tuples of two ints/floats. These numbers represent for each predictor layer how many\n            pixels apart the anchor box center points should be vertically and horizontally along the spatial grid over\n            the image. If the list contains ints/floats, then that value will be used for both spatial dimensions.\n            If the list contains tuples of two ints/floats, then they represent `(step_height, step_width)`.\n            If no steps are provided, then they will be computed such that the anchor box center points will form an\n            equidistant grid within the image dimensions.\n        offsets (list, optional): `None` or a list with as many elements as there are predictor layers. The elements can be\n            either floats or tuples of two floats. These numbers represent for each predictor layer how many\n            pixels from the top and left boarders of the image the top-most and left-most anchor box center points should be\n            as a fraction of `steps`. The last bit is important: The offsets are not absolute pixel values, but fractions\n            of the step size specified in the `steps` argument. If the list contains floats, then that value will\n            be used for both spatial dimensions. If the list contains tuples of two floats, then they represent\n            `(vertical_offset, horizontal_offset)`. If no offsets are provided, then they will default to 0.5 of the step size.\n        clip_boxes (bool, optional): If `True`, clips the anchor box coordinates to stay within image boundaries.\n        variances (list, optional): A list of 4 floats >0. The anchor box offset for each coordinate will be divided by\n            its respective variance value.\n        coords (str, optional): The box coordinate format to be used internally by the model (i.e. this is not the input format\n            of the ground truth labels). Can be either 'centroids' for the format `(cx, cy, w, h)` (box center coordinates, width,\n            and height), 'minmax' for the format `(xmin, xmax, ymin, ymax)`, or 'corners' for the format `(xmin, ymin, xmax, ymax)`.\n        normalize_coords (bool, optional): Set to `True` if the model is supposed to use relative instead of absolute coordinates,\n            i.e. if the model predicts box coordinates within [0,1] instead of absolute coordinates.\n        subtract_mean (array-like, optional): `None` or an array-like object of integers or floating point values\n            of any shape that is broadcast-compatible with the image shape. The elements of this array will be\n            subtracted from the image pixel intensity values. For example, pass a list of three integers\n            to perform per-channel mean normalization for color images.\n        divide_by_stddev (array-like, optional): `None` or an array-like object of non-zero integers or\n            floating point values of any shape that is broadcast-compatible with the image shape. The image pixel\n            intensity values will be divided by the elements of this array. For example, pass a list\n            of three integers to perform per-channel standard deviation normalization for color images.\n        swap_channels (list, optional): Either `False` or a list of integers representing the desired order in which the input\n            image channels should be swapped.\n        confidence_thresh (float, optional): A float in [0,1), the minimum classification confidence in a specific\n            positive class in order to be considered for the non-maximum suppression stage for the respective class.\n            A lower value will result in a larger part of the selection process being done by the non-maximum suppression\n            stage, while a larger value will result in a larger part of the selection process happening in the confidence\n            thresholding stage.\n        iou_threshold (float, optional): A float in [0,1]. All boxes that have a Jaccard similarity of greater than `iou_threshold`\n            with a locally maximal box will be removed from the set of predictions for a given class, where 'maximal' refers\n            to the box's confidence score.\n        top_k (int, optional): The number of highest scoring predictions to be kept for each batch item after the\n            non-maximum suppression stage.\n        nms_max_output_size (int, optional): The maximal number of predictions that will be left over after the NMS stage.\n        return_predictor_sizes (bool, optional): If `True`, this function not only returns the model, but also\n            a list containing the spatial dimensions of the predictor layers. This isn't strictly necessary since\n            you can always get their sizes easily via the Keras API, but it's convenient and less error-prone\n            to get them this way. They are only relevant for training anyway (SSDBoxEncoder needs to know the\n            spatial dimensions of the predictor layers), for inference you don't need them.\n\n    Returns:\n        model: The Keras SSD300 model.\n        predictor_sizes (optional): A Numpy array containing the `(height, width)` portion\n            of the output tensor shape for each convolutional predictor layer. During\n            training, the generator function needs this in order to transform\n            the ground truth labels into tensors of identical structure as the\n            output tensors of the model, which is in turn needed for the cost\n            function.\n\n    References:\n        https://arxiv.org/abs/1512.02325v5\n    '''\n\n    n_predictor_layers = 6 # The number of predictor conv layers in the network is 6 for the original SSD300.\n    n_classes += 1 # Account for the background class.\n    l2_reg = l2_regularization # Make the internal name shorter.\n    img_height, img_width, img_channels = image_size[0], image_size[1], image_size[2]\n    EARTH_RADIUS = tf.constant(6371000, tf.float32)  # Radius in meters of Earth\n    GOOGLE_CAR_CAMERA_HEIGHT = tf.cast(3, tf.float32) # ballpark estimate of the number of meters that camera is off the ground\n    MATH_PI = tf.cast(math.pi, tf.float32)\n    ############################################################################\n    # Get a few exceptions out of the way.\n    ############################################################################\n\n    if aspect_ratios_global is None and aspect_ratios_per_layer is None:\n        raise ValueError(\"`aspect_ratios_global` and `aspect_ratios_per_layer` cannot both be None. At least one needs to be specified.\")\n    if aspect_ratios_per_layer:\n        if len(aspect_ratios_per_layer) != n_predictor_layers:\n            raise ValueError(\"It must be either aspect_ratios_per_layer is None or len(aspect_ratios_per_layer) == {}, but len(aspect_ratios_per_layer) == {}.\".format(n_predictor_layers, len(aspect_ratios_per_layer)))\n\n    if (min_scale is None or max_scale is None) and scales is None:\n        raise ValueError(\"Either `min_scale` and `max_scale` or `scales` need to be specified.\")\n    if scales:\n        if len(scales) != n_predictor_layers+1:\n            raise ValueError(\"It must be either scales is None or len(scales) == {}, but len(scales) == {}.\".format(n_predictor_layers+1, len(scales)))\n    else: # If no explicit list of scaling factors was passed, compute the list of scaling factors from `min_scale` and `max_scale`\n        scales = np.linspace(min_scale, max_scale, n_predictor_layers+1)\n\n    if len(variances) != 4:\n        raise ValueError(\"4 variance values must be pased, but {} values were received.\".format(len(variances)))\n    variances = np.array(variances)\n    if np.any(variances <= 0):\n        raise ValueError(\"All variances must be >0, but the variances given are {}\".format(variances))\n\n    if (not (steps is None)) and (len(steps) != n_predictor_layers):\n        raise ValueError(\"You must provide at least one step value per predictor layer.\")\n\n    if (not (offsets is None)) and (len(offsets) != n_predictor_layers):\n        raise ValueError(\"You must provide at least one offset value per predictor layer.\")\n\n    ############################################################################\n    # Compute the anchor box parameters.\n    ############################################################################\n\n    # Set the aspect ratios for each predictor layer. These are only needed for the anchor box layers.\n    if aspect_ratios_per_layer:\n        aspect_ratios = aspect_ratios_per_layer\n    else:\n        aspect_ratios = [aspect_ratios_global] * n_predictor_layers\n\n    # Compute the number of boxes to be predicted per cell for each predictor layer.\n    # We need this so that we know how many channels the predictor layers need to have.\n    if aspect_ratios_per_layer:\n        n_boxes = []\n        for ar in aspect_ratios_per_layer:\n            if (1 in ar) & two_boxes_for_ar1:\n                n_boxes.append(len(ar) + 1) # +1 for the second box for aspect ratio 1\n            else:\n                n_boxes.append(len(ar))\n    else: # If only a global aspect ratio list was passed, then the number of boxes is the same for each predictor layer\n        if (1 in aspect_ratios_global) & two_boxes_for_ar1:\n            n_boxes = len(aspect_ratios_global) + 1\n        else:\n            n_boxes = len(aspect_ratios_global)\n        n_boxes = [n_boxes] * n_predictor_layers\n\n    if steps is None:\n        steps = [None] * n_predictor_layers\n    if offsets is None:\n        offsets = [None] * n_predictor_layers\n\n    ############################################################################\n    # Define functions for the Lambda layers below.\n    ############################################################################\n\n    def identity_layer(tensor):\n        return tensor\n\n    def input_mean_normalization(tensor):\n        return tensor - np.array(subtract_mean)\n\n    def input_stddev_normalization(tensor):\n        return tensor / np.array(divide_by_stddev)\n\n    def input_channel_swap(tensor):\n        if len(swap_channels) == 3:\n            return K.stack([tensor[...,swap_channels[0]], tensor[...,swap_channels[1]], tensor[...,swap_channels[2]]], axis=-1)\n        elif len(swap_channels) == 4:\n            return K.stack([tensor[...,swap_channels[0]], tensor[...,swap_channels[1]], tensor[...,swap_channels[2]], tensor[...,swap_channels[3]]], axis=-1)\n\n    def _atan2(y, x):\n        \"\"\" My implementation of atan2 in tensorflow.  Returns in -pi .. pi.\"\"\"\n        tan = tf.atan(y / (x + 1e-8))  # this returns in -pi/2 .. pi/2\n\n        one_map = tf.ones_like(tan)\n\n        # correct quadrant error\n        correction = tf.where(tf.less(x + 1e-8, 0.0), 3.141592653589793*one_map, 0.0*one_map)\n        tan_c = tan + correction  # this returns in -pi/2 .. 3pi/2\n\n        # bring to positive values\n        correction = tf.where(tf.less(tan_c, 0.0), 2*3.141592653589793*one_map, 0.0*one_map)\n        tan_zero_2pi = tan_c + correction  # this returns in 0 .. 2pi\n\n        # make symmetric\n        correction = tf.where(tf.greater(tan_zero_2pi, 3.141592653589793), -2*3.141592653589793*one_map, 0.0*one_map)\n        tan_final = tan_zero_2pi + correction  # this returns in -pi .. pi\n        return tan_final \n\n\n    def world_coordinates_to_streetview_pixel(lat, lng, lat1,lng1, yaw, image_width, image_height,height=0, zoom=None, object_dims=None, method=None):\n        image_height = tf.constant(300, dtype=tf.float32)\n        image_width = tf.constant(600, dtype=tf.float32)\n\n        EARTH_RADIUS = tf.cast(6371000, tf.float32)  # Radius in meters of Earth\n        GOOGLE_CAR_CAMERA_HEIGHT = tf.cast(3, tf.float32) # ballpark estimate of the number of meters that camera is off the ground\n        MATH_PI = tf.cast(math.pi, tf.float32)\n        pitch = tf.constant(0, dtype=tf.float32)\n        dx1 = tf.cos((lat1)* (MATH_PI/180))\n        dx11 = lng-lng1\n        dxr = tf.sin(dx11 * (MATH_PI/180))\n        dx = dx1 * dxr\n\n        dy11 = tf.subtract(lat,lat1)\n        dyr = tf.multiply(dy11,(MATH_PI/180))\n        dy = tf.sin(dyr)\n        look_at_angle = MATH_PI + _atan2(dx, dy) - yaw \n\n        i = 2*MATH_PI\n\n        c = lambda x : tf.reduce_any(tf.greater(x, i))\n        b = lambda x : tf.subtract(x, tf.cast(tf.greater(x, i), tf.float32)*(2*MATH_PI))\n        look_at_angle = tf.while_loop(c, b, [look_at_angle])\n\n        t = lambda x : tf.reduce_any(tf.less(x, 0))\n        d = lambda x : tf.add(x, tf.cast(tf.less(x, 0), tf.float32)*(2*MATH_PI)) \n        look_at_angle = tf.while_loop(t, d, [look_at_angle])\n\n        inner = dx*dx+dy*dy\n        z = tf.multiply(tf.sqrt(tf.add(inner,1e-10)),tf.constant(6371000, tf.float32))\n        # z = tf.where(tf.is_nan(z), tf.zeros_like(z), z)\n\n        camhei_ = tf.fill(tf.shape(z), -GOOGLE_CAR_CAMERA_HEIGHT)\n\n        x_ = tf.divide(tf.multiply(image_width,look_at_angle),(2*MATH_PI))\n\n        y_0 = tf.divide(image_height,tf.constant(2.0, dtype=tf.float32))\n        y_1 = tf.multiply(image_height,tf.subtract(_atan2(camhei_, z),pitch))\n        y_2 = tf.divide(y_1,MATH_PI)\n        y_ = tf.subtract(y_0,y_2)\n\n        return x_, y_\n\n    def streetview_pixel_to_world_coordinates(lat1,lng1, yaw, image_width, image_height, x, y):\n        EARTH_RADIUS = tf.cast(6371000, tf.float32)  # Radius in meters of Earth\n        GOOGLE_CAR_CAMERA_HEIGHT = tf.cast(3, tf.float32) # ballpark estimate of the number of meters that camera is off the ground\n        MATH_PI = tf.cast(math.pi, tf.float32)\n        pitch = float(0)\n        look_at_angle = x*(2*math.pi)/image_width\n        height = 0\n        tilt_angle = (image_height/2-y)*math.pi/image_height+pitch\n        tilt_angle = tf.cast(tilt_angle, tf.float32)\n        z_ = K.minimum(np.float32(-1e-2),tilt_angle)        \n        z = tf.divide((-GOOGLE_CAR_CAMERA_HEIGHT),tf.tan(z_))\n        dx = tf.sin(look_at_angle-MATH_PI+yaw)*z/EARTH_RADIUS\n        dy = tf.cos(look_at_angle-MATH_PI+yaw)*z/EARTH_RADIUS\n        lat = lat1 + tf.asin(dy) * (180/MATH_PI)\n        lng = lng1 + tf.asin(dx/tf.cos(lat1*(MATH_PI/180)))*(180/MATH_PI)\n        return lat, lng\n\n    def zeroer(inp):\n        z = K.ones_like(inp)\n        return z\n\n    def projector(y_input):\n        y_in = y_input[:,:,:14]\n        y_geo_1 = y_input[:,:,14:17]\n        y_geo_2 = y_input[:,:,17:]\n\n        cx = y_in[...,-12] * y_in[...,-4] * y_in[...,-6] + y_in[...,-8] # cx = cx_pred * cx_variance * w_anchor + cx_anchor\n        cy = y_in[...,-11] * y_in[...,-3] * y_in[...,-5] + y_in[...,-7] # cy = cy_pred * cy_variance * h_anchor + cy_anchor\n        w = tf.exp(y_in[...,-10] * y_in[...,-2]) * y_in[...,-6] # w = exp(w_pred * variance_w) * w_anchor\n        h = tf.exp(y_in[...,-9] * y_in[...,-1]) * y_in[...,-5] # h = exp(h_pred * variance_h) * h_anchor\n\n        w = y_in[...,-10] * y_in[...,-2] # w = exp(w_pred * variance_w) * w_anchor\n        h = y_in[...,-9] * y_in[...,-1] # h = exp(h_pred * variance_h) * h_anchor\n        cx = tf.where(tf.is_nan(cx), tf.ones_like(cx), cx) * 1e-8\n        cy = tf.where(tf.is_nan(cy), tf.ones_like(cy), cy) * 1e-8\n        w = tf.where(tf.is_nan(w), tf.ones_like(w), w) * 1e-8\n        h = tf.where(tf.is_nan(h), tf.ones_like(h), h) * 1e-8\n\n        cx = tf.expand_dims(cx, axis=-1)\n        cy = tf.expand_dims(cy, axis=-1)\n        w = tf.expand_dims(w, axis=-1)\n        h = tf.expand_dims(h, axis=-1)\n\n        tensor= Concatenate(axis=-1, name='y_proj')([cx,cy,w,h])\n        ind = 0\n        xmin = tensor[..., ind] - tensor[..., ind+2] / 2.0 # Set xmin\n        ymin = tensor[..., ind+1] - tensor[..., ind+3] / 2.0 # Set ymin\n        xmax = tensor[..., ind] + tensor[..., ind+2] / 2.0 # Set xmax\n        ymax = tensor[..., ind+1] + tensor[..., ind+3] / 2.0 # Set ymax\n\n        normalize_coords=True\n        tf_img_height = tf.constant(300, dtype=tf.float32, name='img_height')\n        tf_img_width = tf.constant(600, dtype=tf.float32, name='img_width')\n        tf_normalize_coords = tf.constant(normalize_coords, name='normalize_coords')\n\n        def normalized_coords():\n            xmin1 = tf.expand_dims(xmin * tf_img_width, axis=-1)\n            ymin1 = tf.expand_dims(ymin * tf_img_height, axis=-1)\n            xmax1 = tf.expand_dims(xmax * tf_img_width, axis=-1)\n            ymax1 = tf.expand_dims(ymax * tf_img_height, axis=-1)\n            return xmin1, ymin1, xmax1, ymax1\n            \n        def non_normalized_coords():\n            return tf.expand_dims(xmin, axis=-1), tf.expand_dims(ymin, axis=-1), tf.expand_dims(xmax, axis=-1), tf.expand_dims(ymax, axis=-1)\n\n        xmin, ymin, xmax, ymax = tf.cond(tf_normalize_coords, normalized_coords, non_normalized_coords)\n\n        x = xmax - xmin\n        x = x / 2\n        x = xmin + x\n        y = ymax\n\n        lat, lng = streetview_pixel_to_world_coordinates(y_geo_1[:,0,1][0],y_geo_1[:,0,2][0], y_geo_1[:,0,0][0], 600, 300, x, y)\n        x_, y_ = world_coordinates_to_streetview_pixel(lat, lng, y_geo_2[:,0,1][0], y_geo_2[:,0,2][0], y_geo_2[:,0,0][0], 600, 300)\n\n        x_h = (xmax - xmin)/2.0\n        y_h = (ymax - ymin)/2.0\n\n        xmin_ = x_ - x_h\n        ymin_ = y_ - 2*y_h\n        xmax_ = x_ + x_h\n        ymax_ = y_ + y_h\n\n        xmin_ = tf.where(tf.is_nan(xmin_), tf.ones_like(xmin_), xmin_) * 1e-8\n        ymin_ = tf.where(tf.is_nan(ymin_), tf.ones_like(ymin_), ymin_) * 1e-8\n        xmax_ = tf.where(tf.is_nan(xmax_), tf.ones_like(xmax_), xmax_) * 1e-8\n        ymax_ = tf.where(tf.is_nan(ymax_), tf.ones_like(ymax_), ymax_) * 1e-8\n\n        cx_ = tf.divide(tf.add(xmin_, xmax_), tf.constant(2.0, dtype=tf.float32))\n        cy_ = tf.divide(tf.add(ymin_, ymax_), tf.constant(2.0, dtype=tf.float32))\n        w_ = tf.subtract(xmax_,xmin_)\n        h_ = tf.subtract(ymax_,ymin_)\n\n        cx_ = tf.where(tf.is_nan(cx_), tf.ones_like(cx_), cx_) * 1e-8\n        cy_ = tf.where(tf.is_nan(cy_), tf.ones_like(cy_), cy_) * 1e-8\n        w_ = tf.where(tf.is_nan(w_), tf.ones_like(w_), w_) * 1e-8\n        h_ = tf.where(tf.is_nan(h_), tf.ones_like(h_), h_) * 1e-8\n\n        y_out = tf.concat([cx_/600,cy_/300,w_/600,h_/300], -1)\n\n        return y_out, lat, lng\n\n    ############################################################################\n    # Build the network.\n    ############################################################################\n\n\n    def ssdmod(x,geo_1,geo_2,suf):\n        x1= Lambda(identity_layer, output_shape=(img_height, img_width, img_channels), name='identity_layer'+'_'+suf)(x)\n        if not (subtract_mean is None):\n            x1= Lambda(input_mean_normalization, output_shape=(img_height, img_width, img_channels), name='input_mean_normalization'+'_'+suf)(x1)\n        if not (divide_by_stddev is None):\n            x1= Lambda(input_stddev_normalization, output_shape=(img_height, img_width, img_channels), name='input_stddev_normalization'+'_'+suf)(x1)\n        if swap_channels:\n            x1= Lambda(input_channel_swap, output_shape=(img_height, img_width, img_channels), name='input_channel_swap'+'_'+suf)(x1)\n        conv1_1= Conv2D(64, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv1_1'+'_'+suf)(x1)\n        conv1_2= Conv2D(64, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv1_2'+'_'+suf)(conv1_1)\n        pool1= MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same', name='pool1'+'_'+suf)(conv1_2)\n\n        conv2_1= Conv2D(128, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv2_1'+'_'+suf)(pool1)\n        conv2_2= Conv2D(128, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv2_2'+'_'+suf)(conv2_1)\n        pool2= MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same', name='pool2'+'_'+suf)(conv2_2)\n\n        conv3_1= Conv2D(256, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv3_1'+'_'+suf)(pool2)\n        conv3_2= Conv2D(256, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv3_2'+'_'+suf)(conv3_1)\n        conv3_3= Conv2D(256, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv3_3'+'_'+suf)(conv3_2)\n        pool3= MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same', name='pool3'+'_'+suf)(conv3_3)\n\n        conv4_1 = Conv2D(512, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv4_1'+'_'+suf)(pool3)\n        conv4_2 = Conv2D(512, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv4_2'+'_'+suf)(conv4_1)\n        conv4_3 = Conv2D(512, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv4_3'+'_'+suf)(conv4_2)\n        pool4 = MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same', name='pool4'+'_'+suf)(conv4_3)\n\n        conv5_1 = Conv2D(512, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv5_1'+'_'+suf)(pool4)\n        conv5_2 = Conv2D(512, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv5_2'+'_'+suf)(conv5_1)\n        conv5_3 = Conv2D(512, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv5_3'+'_'+suf)(conv5_2)\n        pool5 = MaxPooling2D(pool_size=(3, 3), strides=(1, 1), padding='same', name='pool5'+'_'+suf)(conv5_3)\n\n        fc6 = Conv2D(1024, (3, 3), dilation_rate=(6, 6), activation='relu', padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='fc6'+'_'+suf)(pool5)\n\n        fc7 = Conv2D(1024, (1, 1), activation='relu', padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='fc7'+'_'+suf)(fc6)\n\n        conv6_1 = Conv2D(256, (1, 1), activation='relu', padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv6_1'+'_'+suf)(fc7)\n        conv6_1 = ZeroPadding2D(padding=((1, 1), (1, 1)), name='conv6adding'+'_'+suf)(conv6_1)\n        conv6_2 = Conv2D(512, (3, 3), strides=(2, 2), activation='relu', padding='valid', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv6_2'+'_'+suf)(conv6_1)\n\n        conv7_1 = Conv2D(128, (1, 1), activation='relu', padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv7_1'+'_'+suf)(conv6_2)\n        conv7_1 = ZeroPadding2D(padding=((1, 1), (1, 1)), name='conv7adding'+'_'+suf)(conv7_1)\n        conv7_2 = Conv2D(256, (3, 3), strides=(2, 2), activation='relu', padding='valid', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv7_2'+'_'+suf)(conv7_1)\n\n        conv8_1 = Conv2D(128, (1, 1), activation='relu', padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv8_1'+'_'+suf)(conv7_2)\n        conv8_2 = Conv2D(256, (3, 3), strides=(1, 1), activation='relu', padding='valid', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv8_2'+'_'+suf)(conv8_1)\n\n        conv9_1 = Conv2D(128, (1, 1), activation='relu', padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv9_1'+'_'+suf)(conv8_2)\n        conv9_2 = Conv2D(256, (3, 3), strides=(1, 1), activation='relu', padding='valid', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv9_2'+'_'+suf)(conv9_1)\n\n        # Feed conv4_3 into the L2 normalization layer\n        conv4_3_norm = L2Normalization(gamma_init=20, name='conv4_3_norm'+'_'+suf)(conv4_3)\n\n        ### Build the convolutional predictor layers on top of the base network\n\n        # We precidt `n_classes` confidence values for each box, hence the confidence predictors have depth `n_boxes * n_classes`\n        # Output shape of the confidence layers: `(batch, height, width, n_boxes * n_classes)`\n        conv4_3_norm_mbox_conf = Conv2D(n_boxes[0] * n_classes, (3, 3), padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv4_3_norm_mbox_conf'+'_'+suf)(conv4_3_norm)\n        fc7_mbox_conf = Conv2D(n_boxes[1] * n_classes, (3, 3), padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='fc7_mbox_conf'+'_'+suf)(fc7)\n        conv6_2_mbox_conf = Conv2D(n_boxes[2] * n_classes, (3, 3), padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv6_2_mbox_conf'+'_'+suf)(conv6_2)\n        conv7_2_mbox_conf = Conv2D(n_boxes[3] * n_classes, (3, 3), padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv7_2_mbox_conf'+'_'+suf)(conv7_2)\n        conv8_2_mbox_conf = Conv2D(n_boxes[4] * n_classes, (3, 3), padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv8_2_mbox_conf'+'_'+suf)(conv8_2)\n        conv9_2_mbox_conf = Conv2D(n_boxes[5] * n_classes, (3, 3), padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv9_2_mbox_conf'+'_'+suf)(conv9_2)\n        # We predict 4 box coordinates for each box, hence the localization predictors have depth `n_boxes * 4`\n        # Output shape of the localization layers: `(batch, height, width, n_boxes * 4)`\n        conv4_3_norm_mbox_loc = Conv2D(n_boxes[0] * 4, (3, 3), padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv4_3_norm_mbox_loc'+'_'+suf)(conv4_3_norm)\n        fc7_mbox_loc = Conv2D(n_boxes[1] * 4, (3, 3), padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='fc7_mbox_loc'+'_'+suf)(fc7)\n        conv6_2_mbox_loc = Conv2D(n_boxes[2] * 4, (3, 3), padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv6_2_mbox_loc'+'_'+suf)(conv6_2)\n        conv7_2_mbox_loc = Conv2D(n_boxes[3] * 4, (3, 3), padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv7_2_mbox_loc'+'_'+suf)(conv7_2)\n        conv8_2_mbox_loc = Conv2D(n_boxes[4] * 4, (3, 3), padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv8_2_mbox_loc'+'_'+suf)(conv8_2)\n        conv9_2_mbox_loc = Conv2D(n_boxes[5] * 4, (3, 3), padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(l2_reg), name='conv9_2_mbox_loc'+'_'+suf)(conv9_2)\n\n        ### Generate the anchor boxes (called \"priors\" in the original Caffe/C++ implementation, so I'll keep their layer names)\n\n        # Output shape of anchors: `(batch, height, width, n_boxes, 8)`\n        conv4_3_norm_mbox_priorbox= AnchorBoxes(img_height, img_width, this_scale=scales[0], next_scale=scales[1], aspect_ratios=aspect_ratios[0],\n                                                 two_boxes_for_ar1=two_boxes_for_ar1, this_steps=steps[0], this_offsets=offsets[0], clip_boxes=clip_boxes,\n                                                 variances=variances, coords=coords, normalize_coords=normalize_coords, name='conv4_3_norm_mbox_priorbox'+'_'+suf)(conv4_3_norm_mbox_loc)\n        fc7_mbox_priorbox= AnchorBoxes(img_height, img_width, this_scale=scales[1], next_scale=scales[2], aspect_ratios=aspect_ratios[1],\n                                        two_boxes_for_ar1=two_boxes_for_ar1, this_steps=steps[1], this_offsets=offsets[1], clip_boxes=clip_boxes,\n                                        variances=variances, coords=coords, normalize_coords=normalize_coords, name='fc7_mbox_priorbox'+'_'+suf)(fc7_mbox_loc)\n        conv6_2_mbox_priorbox= AnchorBoxes(img_height, img_width, this_scale=scales[2], next_scale=scales[3], aspect_ratios=aspect_ratios[2],\n                                            two_boxes_for_ar1=two_boxes_for_ar1, this_steps=steps[2], this_offsets=offsets[2], clip_boxes=clip_boxes,\n                                            variances=variances, coords=coords, normalize_coords=normalize_coords, name='conv6_2_mbox_priorbox'+'_'+suf)(conv6_2_mbox_loc)\n        conv7_2_mbox_priorbox= AnchorBoxes(img_height, img_width, this_scale=scales[3], next_scale=scales[4], aspect_ratios=aspect_ratios[3],\n                                            two_boxes_for_ar1=two_boxes_for_ar1, this_steps=steps[3], this_offsets=offsets[3], clip_boxes=clip_boxes,\n                                            variances=variances, coords=coords, normalize_coords=normalize_coords, name='conv7_2_mbox_priorbox'+'_'+suf)(conv7_2_mbox_loc)\n        conv8_2_mbox_priorbox= AnchorBoxes(img_height, img_width, this_scale=scales[4], next_scale=scales[5], aspect_ratios=aspect_ratios[4],\n                                            two_boxes_for_ar1=two_boxes_for_ar1, this_steps=steps[4], this_offsets=offsets[4], clip_boxes=clip_boxes,\n                                            variances=variances, coords=coords, normalize_coords=normalize_coords, name='conv8_2_mbox_priorbox'+'_'+suf)(conv8_2_mbox_loc)\n        conv9_2_mbox_priorbox= AnchorBoxes(img_height, img_width, this_scale=scales[5], next_scale=scales[6], aspect_ratios=aspect_ratios[5],\n                                            two_boxes_for_ar1=two_boxes_for_ar1, this_steps=steps[5], this_offsets=offsets[5], clip_boxes=clip_boxes,\n                                            variances=variances, coords=coords, normalize_coords=normalize_coords, name='conv9_2_mbox_priorbox'+'_'+suf)(conv9_2_mbox_loc)\n\n        ### Reshape\n\n        # Reshape the class predictions, yielding 3D tensors of shape `(batch, height * width * n_boxes, n_classes)`\n        # We want the classes isolated in the last axis to perform softmax on them\n        conv4_3_norm_mbox_conf_reshape= Reshape((-1, n_classes), name='conv4_3_norm_mbox_conf_reshape'+'_'+suf)(conv4_3_norm_mbox_conf)\n        fc7_mbox_conf_reshape= Reshape((-1, n_classes), name='fc7_mbox_conf_reshape'+'_'+suf)(fc7_mbox_conf)\n        conv6_2_mbox_conf_reshape= Reshape((-1, n_classes), name='conv6_2_mbox_conf_reshape'+'_'+suf)(conv6_2_mbox_conf)\n        conv7_2_mbox_conf_reshape= Reshape((-1, n_classes), name='conv7_2_mbox_conf_reshape'+'_'+suf)(conv7_2_mbox_conf)\n        conv8_2_mbox_conf_reshape= Reshape((-1, n_classes), name='conv8_2_mbox_conf_reshape'+'_'+suf)(conv8_2_mbox_conf)\n        conv9_2_mbox_conf_reshape= Reshape((-1, n_classes), name='conv9_2_mbox_conf_reshape'+'_'+suf)(conv9_2_mbox_conf)\n        # Reshape the box predictions, yielding 3D tensors of shape `(batch, height * width * n_boxes, 4)`\n        # We want the four box coordinates isolated in the last axis to compute the smooth L1 loss\n        conv4_3_norm_mbox_loc_reshape= Reshape((-1, 4), name='conv4_3_norm_mbox_loc_reshape'+'_'+suf)(conv4_3_norm_mbox_loc)\n        fc7_mbox_loc_reshape= Reshape((-1, 4), name='fc7_mbox_loc_reshape'+'_'+suf)(fc7_mbox_loc)\n        conv6_2_mbox_loc_reshape= Reshape((-1, 4), name='conv6_2_mbox_loc_reshape'+'_'+suf)(conv6_2_mbox_loc)\n        conv7_2_mbox_loc_reshape= Reshape((-1, 4), name='conv7_2_mbox_loc_reshape'+'_'+suf)(conv7_2_mbox_loc)\n        conv8_2_mbox_loc_reshape= Reshape((-1, 4), name='conv8_2_mbox_loc_reshape'+'_'+suf)(conv8_2_mbox_loc)\n        conv9_2_mbox_loc_reshape= Reshape((-1, 4), name='conv9_2_mbox_loc_reshape'+'_'+suf)(conv9_2_mbox_loc)\n        # Reshape the anchor box tensors, yielding 3D tensors of shape `(batch, height * width * n_boxes, 8)`\n        conv4_3_norm_mbox_priorbox_reshape= Reshape((-1, 8), name='conv4_3_norm_mbox_priorbox_reshape'+'_'+suf)(conv4_3_norm_mbox_priorbox)\n        fc7_mbox_priorbox_reshape= Reshape((-1, 8), name='fc7_mbox_priorbox_reshape'+'_'+suf)(fc7_mbox_priorbox)\n        conv6_2_mbox_priorbox_reshape= Reshape((-1, 8), name='conv6_2_mbox_priorbox_reshape'+'_'+suf)(conv6_2_mbox_priorbox)\n        conv7_2_mbox_priorbox_reshape= Reshape((-1, 8), name='conv7_2_mbox_priorbox_reshape'+'_'+suf)(conv7_2_mbox_priorbox)\n        conv8_2_mbox_priorbox_reshape= Reshape((-1, 8), name='conv8_2_mbox_priorbox_reshape'+'_'+suf)(conv8_2_mbox_priorbox)\n        conv9_2_mbox_priorbox_reshape= Reshape((-1, 8), name='conv9_2_mbox_priorbox_reshape'+'_'+suf)(conv9_2_mbox_priorbox)\n\n        ### Concatenate the predictions from the different layers\n\n        # Axis 0 (batch) and axis 2 (n_classes or 4, respectively) are identical for all layer predictions,\n        # so we want to concatenate along axis 1, the number of boxes per layer\n        # Output shape of `mbox_conf`: (batch, n_boxes_total, n_classes)\n        mbox_conf= Concatenate(axis=1, name='mbox_conf'+'_'+suf)([conv4_3_norm_mbox_conf_reshape,\n                                                           fc7_mbox_conf_reshape,\n                                                           conv6_2_mbox_conf_reshape,\n                                                           conv7_2_mbox_conf_reshape,\n                                                           conv8_2_mbox_conf_reshape,\n                                                           conv9_2_mbox_conf_reshape])\n\n        # Output shape of `mbox_loc`: (batch, n_boxes_total, 4)\n        mbox_loc= Concatenate(axis=1, name='mbox_loc'+'_'+suf)([conv4_3_norm_mbox_loc_reshape,\n                                                         fc7_mbox_loc_reshape,\n                                                         conv6_2_mbox_loc_reshape,\n                                                         conv7_2_mbox_loc_reshape,\n                                                         conv8_2_mbox_loc_reshape,\n                                                         conv9_2_mbox_loc_reshape])\n\n        # Output shape of `mbox_priorbox`: (batch, n_boxes_total, 8)\n        mbox_priorbox= Concatenate(axis=1, name='mbox_priorbox'+'_'+suf)([conv4_3_norm_mbox_priorbox_reshape,\n                                                                   fc7_mbox_priorbox_reshape,\n                                                                   conv6_2_mbox_priorbox_reshape,\n                                                                   conv7_2_mbox_priorbox_reshape,\n                                                                   conv8_2_mbox_priorbox_reshape,\n                                                                   conv9_2_mbox_priorbox_reshape])\n\n        # The box coordinate predictions will go into the loss function just the way they are,\n        # but for the class predictions, we'll apply a softmax activation layer first\n        mbox_conf_softmax= Activation('softmax', name='mbox_conf_softmax'+'_'+suf)(mbox_conf)\n\n        # Concatenate the class and box predictions and the anchors to one large predictions vector\n        # Output shape of `predictions`: (batch, n_boxes_total, n_classes + 4 + 8)\n        mbox_loc_tot = Concatenate(axis=2, name='predictions_tot'+suf)([mbox_conf, mbox_loc, mbox_priorbox, geo_1, geo_2])\n\n        # mbox_proj = Projector(300,600, EARTH_RADIUS, GOOGLE_CAR_CAMERA_HEIGHT, MATH_PI)(mbox_loc_tot)\n\n        mbox_proj, lat, lng = Lambda(projector, name='predictions'+'_'+suf+'_mbox_proj')(mbox_loc_tot)\n\n        # mbox_conf_softmax = 2, mbox_loc = 4, mbox_priorbox = 8, mbox_conf_softmax= 2, mbox_proj= 4, mbox_priorbox = 8\n        # predictions = Concatenate(axis=2, name='predictions'+'_'+suf)([mbox_conf_softmax, mbox_loc, mbox_priorbox, mbox_proj])\n        geocoordinates = Concatenate(axis=2, name='geocoordinates'+suf)([lat, lng])\n        empty_4 = Lambda(zeroer)(mbox_loc)\n        empty_2 = Lambda(zeroer)(mbox_conf_softmax)\n\n        predictions = Concatenate(axis=2, name='predictions'+suf)([mbox_conf_softmax, mbox_loc, mbox_priorbox,empty_4])\n        \n        # predictions = Concatenate(axis=2, name='predictions'+suf)([mbox_conf_softmax, mbox_loc, mbox_priorbox])\n        # mbox_proj = Dense(32, input_dim=13, kernel_initializer='normal', activation='relu')(mbox_proj)\n        # mbox_proj = Dense(16, input_dim=13, kernel_initializer='normal', activation='relu')(mbox_proj)\n        # mbox_proj = Dense(8, input_dim=13, kernel_initializer='normal', activation='relu')(mbox_proj)\n        # mbox_proj = Dense(4, input_dim=13, kernel_initializer='normal', activation='relu')(mbox_proj)\n        # # mbox_proj_conv1 = tf.zeros(tf.shape(mbox_proj_conv1), dtype=tf.float32,name=None)\n\n        # predictions_proj = Concatenate(axis=2, name='predictions'+suf+'_proj')([mbox_conf_softmax, mbox_proj, mbox_priorbox])\n\n        predictions_proj = Concatenate(axis=2, name='predictions'+suf+'_proj')([predictions, mbox_conf_softmax, mbox_proj, mbox_priorbox, empty_4])\n\n\n        # model = Model(input=[x,geo_1,geo_2],output=predictions)\n        model = Model(input=[x,geo_1,geo_2],output=[predictions, predictions_proj, geocoordinates])\n\n        return model\n\n    weights_path = 'weights/VGG_ILSVRC_16_layers_fc_reduced.h5'\n\n    X = Input(shape=(img_height, img_width, img_channels))\n    Z = Input(shape=(img_height, img_width, img_channels))\n    X_geo = Input(shape=(17292,3))\n    Z_geo = Input(shape=(17292,3))\n\n\n    ssd1 = ssdmod(X, X_geo, Z_geo, \"_1\")\n    ssd1.load_weights(weights_path, by_name=True)\n\n    ssd2 = ssdmod(Z, Z_geo, X_geo, \"_2\")\n    ssd2.load_weights(weights_path, by_name=True)\n\n\n    if mode == 'training':\n        # pred_1_proj = Concatenate(axis=2, name='predictions_1_proj_tot')([ssd1.get_layer(name=\"predictions_1\").output,ssd1.get_layer(name=\"predictions_1_proj\").output])\n        # pred_2_proj = Concatenate(axis=2, name='predictions_2_proj_tot')([ssd2.get_layer(name=\"predictions_2\").output,ssd2.get_layer(name=\"predictions_2_proj\").output])\n\n        # model = Model(inputs=[X, Z, X_geo, Z_geo], outputs=[ssd1.get_layer(name=\"predictions_1\").output,ssd2.get_layer(name=\"predictions_2\").output,pred_1_proj,pred_2_proj])\n        model = Model(inputs=[X, Z, X_geo, Z_geo], outputs=[ssd1.get_layer(name=\"predictions_1\").output,\n                                                            ssd2.get_layer(name=\"predictions_2\").output,\n                                                            ssd1.get_layer(name=\"predictions_1_proj\").output,\n                                                            ssd2.get_layer(name=\"predictions_2_proj\").output,\n                                                            ssd1.get_layer(name=\"geocoordinates_1\").output,\n                                                            ssd2.get_layer(name=\"geocoordinates_2\").output])\n\n        # model = Model(inputs=[X, Z, X_geo, Z_geo], outputs=[ssd1.get_layer(\"predictions_1\").output, ssd2.get_layer(\"predictions_2\").output])\n        # model = Model(inputs=[x, x_x, geo_1, geo_2], outputs=ssd1.get_layer(\"predictions_1\").output)\n        # model = Model(inputs=[X, Z, X_geo, Z_geo], outputs=[preds_1, preds_2])\n\n\n    elif mode == 'inference':\n        decoded_predictions = DecodeDetections(confidence_thresh=confidence_thresh,\n                                               iou_threshold=iou_threshold,\n                                               top_k=top_k,\n                                               nms_max_output_size=nms_max_output_size,\n                                               coords=coords,\n                                               normalize_coords=normalize_coords,\n                                               img_height=img_height,\n                                               img_width=img_width,\n                                               name='decoded_predictions')(predictions)\n        model = Model(inputs=x, outputs=decoded_predictions)\n    elif mode == 'inference_fast':\n        decoded_predictions = DecodeDetectionsFast(confidence_thresh=confidence_thresh,\n                                                   iou_threshold=iou_threshold,\n                                                   top_k=top_k,\n                                                   nms_max_output_size=nms_max_output_size,\n                                                   coords=coords,\n                                                   normalize_coords=normalize_coords,\n                                                   img_height=img_height,\n                                                   img_width=img_width,\n                                                   name='decoded_predictions')(predictions)\n        model = Model(inputs=x, outputs=decoded_predictions)\n    else:\n        raise ValueError(\"`mode` must be one of 'training', 'inference' or 'inference_fast', but received '{}'.\".format(mode))\n\n    if return_predictor_sizes:\n        predictor_sizes = np.array([conv4_3_norm_mbox_conf._keras_shape[1:3],\n                                     fc7_mbox_conf._keras_shape[1:3],\n                                     conv6_2_mbox_conf._keras_shape[1:3],\n                                     conv7_2_mbox_conf._keras_shape[1:3],\n                                     conv8_2_mbox_conf._keras_shape[1:3],\n                                     conv9_2_mbox_conf._keras_shape[1:3]])\n        return model, predictor_sizes\n    else:\n        return model\n",
			"file": "/run/user/1001/gvfs/sftp:host=pf-pc07.ethz.ch,user=anassar/scratch/gits/ssd_keras_double/models/keras_ssd300.py",
			"file_size": 47446,
			"file_write_time": 131949769140000000,
			"settings":
			{
				"buffer_size": 47446,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"the",
				"UI: Select Theme"
			],
			[
				"instak",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Satisfy Dependencies"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Install Package Control"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/nassar/gits/ssd_keras_double",
		"/home/nassar/gits/ssd_keras_double/data_generator",
		"/home/nassar/gits/ssd_keras_double/keras_loss_function",
		"/home/nassar/gits/ssd_keras_double/ssd_encoder_decoder"
	],
	"file_history":
	[
		"/home/nassar/gits/ssd_keras_double/keras_loss_function/keras_ssd_loss_proj.py",
		"/home/nassar/gits/ssd_keras_double/keras_loss_function/keras_ssd_loss_mod.py",
		"/home/nassar/gits/ssd_keras_double/bounding_box_utils/bounding_box_utils.py",
		"/home/nassar/gits/ssd_keras_double/ssd_encoder_decoder/matching_utils.py",
		"/home/nassar/gits/ssd_keras_double/ssd_encoder_decoder/ssd_input_encoder.py",
		"/home/nassar/gits/ssd_keras_double/ssd_encoder_decoder/ssd_input_encoder_mod.py",
		"/home/nassar/gits/ssd_keras_double/models/keras_ssd300.py",
		"/home/nassar/gits/ssd_keras_double/data_generator/object_detection_2d_data_generator.py",
		"/home/nassar/gits/ssd_keras_double/keras_loss_function/keras_ssd_loss.py",
		"/home/nassar/RegisTree/lib/Old Version Py3/street_view.py",
		"/home/nassar/RegisTree/lib/Old Version Py3/aerial_view.py",
		"/home/nassar/gits/ssd_keras_double/data_generator/object_detection_2d_misc_utils.py",
		"/home/nassar/gits/ssd_keras_double/data_generator/object_detection_2d_geometric_ops.py",
		"/home/nassar/gits/ssd_keras_double/train.py",
		"/home/nassar/gits/ssd_keras/train.py",
		"/home/nassar/gits/ssd_keras/data_generator/object_detection_2d_data_generator.py",
		"/home/nassar/gits/double/ssd_keras_modified/data_generator/object_detection_2d_data_generator.py",
		"/home/nassar/gits/double/ssd_keras_modified/train.py",
		"/home/nassar/gits/ssd_keras/data_generator/data_augmentation_chain_original_ssd.py",
		"/home/nassar/gits/ssd_keras_modified/data_generator/object_detection_2d_data_generator.py",
		"/home/nassar/gits/ssd_keras/eval_utils/average_precision_evaluator_pred.py",
		"/home/nassar/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/nassar/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
		"/home/nassar/gits/ssd_keras_modified/keras_layers/keras_layer_Projector.py",
		"/home/nassar/gits/ssd_keras/data_generator/object_detection_2d_data_generator_pred.py",
		"/home/nassar/gits/ssd_keras/eval_utils/average_precision_evaluator_pred_reprised.py",
		"/home/nassar/gits/ssd_keras_modified/models/keras_ssd300.py",
		"/home/nassar/gits/ssd_keras/data_generator/object_detection_2d_geometric_ops.py",
		"/home/nassar/gits/ssd_keras_modified/data_generator/object_detection_2d_geometric_ops.py",
		"/home/nassar/gits/ssd_keras_modified/train.py",
		"/home/nassar/gits/ssd_keras_modified/keras_loss_function/keras_ssd_loss.py",
		"/home/nassar/gits/ssd_keras/keras_layers/keras_layer_DecodeDetections.py",
		"/home/nassar/gits/ssd_keras/eval_utils/average_precision_evaluator.py",
		"/home/nassar/gits/ssd_keras/models/keras_ssd300.py",
		"/home/nassar/gits/ssd_keras/ssd_encoder_decoder/ssd_output_decoder.py",
		"/home/nassar/gits/ssd_keras/ssd_encoder_decoder/ssd_input_encoder.py",
		"/home/nassar/gits/ssd_keras_modified/keras_layers/keras_layer_AnchorBoxes.py",
		"/home/nassar/gits/ssd_keras_modified/ssd_encoder_decoder/ssd_input_encoder.py",
		"/home/nassar/gits/ssd_keras_modified/data_generator/data_augmentation_chain_original_ssd.py",
		"/home/nassar/gits/ssd_keras_modified/bounding_box_utils/bounding_box_utils.py",
		"/home/nassar/gits/ssd_keras_modified/keras_layers/keras_layer_L2Normalization.pyc",
		"/run/user/1001/gvfs/sftp:host=pf-pc07.ethz.ch,user=anassar/scratch/gits/ssd_keras_modified/train.py",
		"/run/user/1001/gvfs/sftp:host=pf-pc07.ethz.ch,user=anassar/scratch/gits/ssd_keras_modified/keras_loss_function/keras_ssd_loss.py",
		"/home/nassar/gits/ssd_keras/keras_loss_function/keras_ssd_loss.py",
		"/home/nassar/gits/datasets/VOC/Pasadena/ImageSets/Main/siamese/trainval_sia.txt",
		"/home/nassar/gits/ssd_keras_modified/keras_layers/keras_layer_DecodeDetections.py",
		"/home/nassar/gits/ssd_keras_modified/ssd_encoder_decoder/ssd_output_decoder.py",
		"/home/nassar/gits/ssd_keras_modified/data_generator/object_detection_2d_image_boxes_validation_utils.py",
		"/home/nassar/gits/ssd_keras/keras_layers/keras_layer_AnchorBoxes.py",
		"/run/user/1001/gvfs/sftp:host=pf-pc07.ethz.ch,user=anassar/scratch/gits/ssd_keras/data_generator/object_detection_2d_data_generator.py",
		"/run/user/1001/gvfs/sftp:host=pf-pc07.ethz.ch,user=anassar/scratch/gits/ssd_keras/keras_loss_function/keras_ssd_loss.py",
		"/home/nassar/Downloads/multi-output-classification/train.py",
		"/run/user/1001/gvfs/sftp:host=pf-pc07.ethz.ch,user=anassar/scratch/gits/ssd_keras/models/keras_ssd300.py",
		"/home/nassar/gits/sim_net/utils/model.py",
		"/home/nassar/gits/sim_net/scripts/train_matchnet_triplet.py",
		"/home/nassar/gits/sim_net/scripts/train_matchnet_stack.py",
		"/home/nassar/gits/sim_net/utils/functions.py",
		"/home/nassar/gits/siamese_net/train_matchnet.py",
		"/run/user/1001/gvfs/sftp:host=pf-pc07.ethz.ch,user=anassar/scratch/gits/ssd_keras/models/keras_ssd300_2.py",
		"/home/nassar/gits/person_search/tools/train_net.py",
		"/home/nassar/gits/person_search/experiments/scripts/train.sh",
		"/home/nassar/gits/person_search/lib/fast_rcnn/train.py",
		"/home/nassar/gits/sim_net/utils/DataHandler.py",
		"/home/nassar/gits/triplet-network-pytorch/tripletnet.py",
		"/home/nassar/gits/triplet-network-pytorch/train.py",
		"/home/nassar/gits/sim_net/scripts/train_matchnet_pair.py",
		"/home/nassar/gits/siamese_net/train_matchnet_amended.py",
		"/home/nassar/gits/sim_net/utils/triplets.py",
		"/home/nassar/gits/siamese_net/DataHandler.py",
		"/home/nassar/gits/triplet-net/src/train_triple.py",
		"/home/nassar/gits/triplet-net/src/triplets.py",
		"/home/nassar/gits/Vgg-Face-Fine-tune/train.py",
		"/home/nassar/gits/sim_net/scripts/train.py",
		"/home/nassar/gits/triplet-net/src/model.py",
		"/home/nassar/gits/Vgg-Face-Fine-tune/data.py",
		"/home/nassar/gits/siamese_net/train_matchnet_fused.py",
		"/home/nassar/gits/siamese_net/train_matchnet_fused.ipynb",
		"/home/nassar/gits/siamese_net/sia_functions.py",
		"/home/nassar/gits/registree_data_generator/generate_from_mongo_siamese_stack.py",
		"/home/nassar/gits/registree_data_generator/generate_from_mongo_siamese.py",
		"/home/nassar/gits/siamese_net/train_experimental_sequential_batch_matchnet_stack.py",
		"/home/nassar/gits/sim_net/utils/vggface.py",
		"/home/nassar/gits/sim_net/scripts/functions.py",
		"/home/nassar/gits/sim_net/lib/__ init __.py",
		"/home/nassar/gits/registree_data_generator/generate_from_mongo_voc.py",
		"/home/nassar/gits/keras_frcnn/Generate_Dataset.py",
		"/home/nassar/gits/ssd_keras/models/keras_ssd512.py",
		"/home/nassar/gits/ssd_keras_1/data_generator/object_detection_2d_data_generator.py",
		"/home/nassar/gits/keras_frcnn/train_frcnn_kitti.py",
		"/home/nassar/gits/keras_frcnn/keras_frcnn/data_generators.py",
		"/home/nassar/gits/keras_frcnn/keras_frcnn/simple_parser.py",
		"/home/nassar/gits/keras_frcnn/keras_frcnn/config.py",
		"/home/nassar/gits/keras_frcnn/test_frcnn_kitti.py",
		"/home/nassar/RegisTree/lib/Old Version/street_view.py",
		"/home/nassar/gits/keras_frcnn/keras_frcnn/losses.py",
		"/home/nassar/tf3/lib/python3.5/site-packages/vis/visualization/activation_maximization.py",
		"/home/nassar/tf3/lib/python3.5/site-packages/vis/visualization/saliency.py",
		"/home/nassar/siamese_net/train_experimental_baseline_scnn_resnet.py",
		"/home/nassar/tf3/lib/python3.5/site-packages/keras_vis-0.4.1-py3.5.egg/vis/optimizer.py",
		"/home/nassar/tf3/lib/python3.5/site-packages/keras_vis-0.4.1-py3.5.egg/vis/visualization/activation_maximization.py",
		"/home/nassar/tf3/lib/python3.5/site-packages/keras_vis-0.4.1-py3.5.egg/vis/visualization/saliency.py",
		"/home/nassar/tf3/lib/python3.5/site-packages/vis/optimizer.py",
		"/home/nassar/siamese_net/train_experimental_sequential_batch_matchnet_amended.py",
		"/home/nassar/gits/triplet-net/src/train.py",
		"/home/nassar/RegisTree/lib/Old Version Py3/detectiontf.py",
		"/home/nassar/tensorflow-posenet/test2.py",
		"/home/nassar/RegisTree/lib/Old Version Py3/detection.py",
		"/home/nassar/RegisTree/lib/Old Version Py3/run_detection_experiments_edited.py",
		"/home/nassar/TreeProject-master-413c7150c32da2669ce3d23c5a3145fd526bd1b2/faster_rcnn_trees/experiments/run_detector.m",
		"/home/nassar/TreeProject-master-413c7150c32da2669ce3d23c5a3145fd526bd1b2/faster_rcnn_trees/experiments/boxes_filter.m",
		"/home/nassar/RegisTree/tf-faster-rcnn/lib/model/test.py",
		"/home/nassar/tensorflow-posenet/test (copy).py",
		"/home/nassar/TreeProject-master-413c7150c32da2669ce3d23c5a3145fd526bd1b2/faster_rcnn_trees/experiments/script_faster_rcnn_AerialViewTrees_ZF.m",
		"/home/nassar/TreeProject-master-413c7150c32da2669ce3d23c5a3145fd526bd1b2/faster_rcnn_trees/experiments/script_faster_rcnn_StreetViewTrees_ZF.m",
		"/home/nassar/TreeProject-master-413c7150c32da2669ce3d23c5a3145fd526bd1b2/faster_rcnn_trees/experiments/script_faster_rcnn_street_view_trees_demo.m",
		"/home/nassar/TreeProject2/detection.py",
		"/home/nassar/TreeProject-master-413c7150c32da2669ce3d23c5a3145fd526bd1b2/faster_rcnn_trees/experiments/script_faster_rcnn_aerial_trees_demo.m",
		"/home/nassar/TreeProject_Edited/detection.py",
		"/home/nassar/RegisTree/lib/Old Version Py3/detection.pyc",
		"/home/nassar/RegisTree/detection_cache/aerial_proposals_0.json",
		"/home/nassar/TreeProject_Edited/run_detection_experiments.py",
		"/home/nassar/TreeProject/run_detection_experiments.py",
		"/home/nassar/TreeProject/aerial_view.py",
		"/home/nassar/pointnet/sem_seg/gen_indoor3d_h5.py",
		"/home/nassar/TreeProject/street_view.py",
		"/home/nassar/TreeProject/detection.py",
		"/home/nassar/TreeProject-master-413c7150c32da2669ce3d23c5a3145fd526bd1b2/detection.py",
		"/home/nassar/RegisTree/lib/RegisTree PythonAPI/image_extract.py"
	],
	"find":
	{
		"height": 29.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"match_bipartite_greedy",
			"pos_iou_threshold",
			"match_bipartite_greedy",
			"SSDInputEncoder",
			"coords",
			"bounding_box_utils",
			"iou",
			"targeter_gt",
			"metrics",
			"metric",
			"accuracy",
			"print(",
			"labels_output_format",
			"here",
			"labels_output_format",
			"generate_encoding_template",
			"generate_anchor_boxes_for_layer",
			"label_encoder",
			"deepcopy",
			"batch_y",
			"conv4_3_norm_mbox_conf"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"folders":
	[
		{
			"path": "/home/nassar/gits/ssd_keras_double"
		}
	],
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/run/user/1001/gvfs/sftp:host=pf-pc07.ethz.ch,user=anassar/scratch/gits/ssd_keras_double/models/keras_ssd300.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 47446,
						"regions":
						{
						},
						"selection":
						[
							[
								44030,
								44030
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11068.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 29.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 33.0
	},
	"pinned_build_system": "",
	"project": "",
	"replace":
	{
		"height": 54.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 326.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
